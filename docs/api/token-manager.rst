TokenManager
============

.. automodule:: evolution_langchain.evolution_inference
   :members:
   :undoc-members:
   :show-inheritance:
   :no-index:

–û–±–∑–æ—Ä
-----

–ö–ª–∞—Å—Å ``TokenManager`` —É–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Evolution Inference API. –û–±—ã—á–Ω–æ –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –∫–ª–∞—Å—Å–æ–º –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ ``EvolutionInference`` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
--------------------

- üîê **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è**: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ key_id –∏ secret
- üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ**: –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
- üíæ **–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ**: –¢–æ–∫–µ–Ω—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- üßµ **Thread-safety**: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π —Å—Ä–µ–¥–µ
- ‚ö° **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è**: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é

–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
-------------

.. code-block:: python

    from evolution_langchain.evolution_inference import TokenManager

    manager = TokenManager(
        key_id="your-key-id",
        secret="your-secret",
        auth_url="https://iam.api.cloud.ru/api/v1/auth/token"  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    )

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã
~~~~~~~~~

+-----------+-------+-----------------------------------------------+
| –ü–∞—Ä–∞–º–µ—Ç—Ä  | –¢–∏–ø   | –û–ø–∏—Å–∞–Ω–∏–µ                                      |
+===========+=======+===============================================+
| ``key_id``| str   | ID –∫–ª—é—á–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏                   |
+-----------+-------+-----------------------------------------------+
| ``secret``| str   | –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á                                |
+-----------+-------+-----------------------------------------------+
| ``auth_url`` | str| URL —Å–µ—Ä–≤–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)      |
+-----------+-------+-----------------------------------------------+

–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
~~~~~~~~~~~~~~~

get_token()
~~~~~~~~~~~

–ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

.. code-block:: python

    def get_token(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.
        
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –∏—Å—Ç—ë–∫ –∏–ª–∏ –∏—Å—Ç–µ—á—ë—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 —Å–µ–∫—É–Ω–¥.
        
        Returns:
            str: –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π access_token
            
        Raises:
            RuntimeError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        """

**–ü—Ä–∏–º–µ—Ä:**
.. code-block:: python

    manager = TokenManager("key_id", "secret")
    token = manager.get_token()
    print(f"–¢–æ–∫–µ–Ω: {token[:20]}...")

_refresh_token()
~~~~~~~~~~~~~~~~

–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –û–±—ã—á–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

.. code-block:: python

    def _refresh_token(self) -> str:
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.
        
        Returns:
            str: –ù–æ–≤—ã–π access_token
            
        Raises:
            RuntimeError: –ü—Ä–∏ –æ—à–∏–±–∫–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        """

–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ª–æ–≥–∏–∫–∞
-----------------

–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —Ç–æ–∫–µ–Ω–∞
~~~~~~~~~~~~~~~~~~~~~

1. **–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å**: –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ ``get_token()`` –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
2. **–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ**: –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è
3. **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞**: –ü—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
4. **–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ**: –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
5. **Thread-safety**: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

–ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
~~~~~~~~~~~~~~~~~~~

–¢–æ–∫–µ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏—Å—Ç—ë–∫—à–∏–º –∑–∞ 30 —Å–µ–∫—É–Ω–¥ –¥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è:

.. code-block:: python

    REFRESH_BUFFER_SECONDS = 30

    def _is_token_expired(self) -> bool:
        current_time = time.time()
        return current_time >= (self._token_expires_at - self.REFRESH_BUFFER_SECONDS)

–≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏–∑-–∑–∞ –∏—Å—Ç—ë–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
- –ë–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω—É—é —Ä–∞–±–æ—Ç—É API
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö

Thread-safety
~~~~~~~~~~~~~

–ö–ª–∞—Å—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions:

.. code-block:: python

    import threading

    class TokenManager:
        def __init__(self, ...):
            self._lock = threading.Lock()
            # ...
        
        def get_token(self) -> str:
            with self._lock:
                if self._is_token_expired():
                    self._refresh_token()
                return self._token

–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
----------------

RuntimeError
~~~~~~~~~~~~

–í–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π:

.. code-block:: python

    try:
        token = manager.get_token()
    except RuntimeError as e:
        print(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
        # - –ù–µ–≤–µ—Ä–Ω—ã–µ key_id/secret
        # - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é
        # - –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
~~~~~~~~~~~~~~~

+-------------------+-------------------+-----------------------------------------------+
| –û—à–∏–±–∫–∞            | –ü—Ä–∏—á–∏–Ω–∞           | –†–µ—à–µ–Ω–∏–µ                                       |
+===================+===================+===============================================+
| ``HTTP 401``      | –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ  | –ü—Ä–æ–≤–µ—Ä–∏—Ç—å key_id –∏ secret                     |
|                   | –¥–∞–Ω–Ω—ã–µ            |                                               |
+-------------------+-------------------+-----------------------------------------------+
| ``HTTP 403``      | –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤   | –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É                   |
|                   | –¥–æ—Å—Ç—É–ø–∞           |                                               |
+-------------------+-------------------+-----------------------------------------------+
| ``Connection      | –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é  | –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ                         |
| timeout``         |                   |                                               |
+-------------------+-------------------+-----------------------------------------------+
| ``Invalid         | –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç | –ü—Ä–æ–≤–µ—Ä–∏—Ç—å auth_url                            |
| response format`` | —Å–µ—Ä–≤–µ—Ä–∞           |                                               |
+-------------------+-------------------+-----------------------------------------------+

–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
----------

–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
~~~~~~~~~~~

–î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:

.. code-block:: python

    import logging

    logging.basicConfig(level=logging.DEBUG)
    logger = logging.getLogger(__name__)

    class DebuggingTokenManager(TokenManager):
        def get_token(self) -> str:
            logger.debug("–ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞")
            token = super().get_token()
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: {token[:10]}...")
            return token
        
        def _refresh_token(self) -> str:
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
            try:
                token = super()._refresh_token()
                logger.info("–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                return token
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
                raise

–ú–µ—Ç—Ä–∏–∫–∏
~~~~~~~

–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:

.. code-block:: python

    import time
    from dataclasses import dataclass
    from typing import List

    @dataclass
    class TokenMetrics:
        refresh_time: float
        token_lifetime: float
        success: bool
        error: str = None

    class MetricsTokenManager(TokenManager):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
            self.metrics: List[TokenMetrics] = []
        
        def _refresh_token(self) -> str:
            start_time = time.time()
            try:
                token = super()._refresh_token()
                refresh_duration = time.time() - start_time
                
                # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ (–æ–±—ã—á–Ω–æ 3 –º–∏–Ω—É—Ç—ã = 180 —Å–µ–∫—É–Ω–¥)
                token_lifetime = self._token_expires_at - start_time
                
                metric = TokenMetrics(
                    refresh_time=refresh_duration,
                    token_lifetime=token_lifetime,
                    success=True
                )
                self.metrics.append(metric)
                return token
                
            except Exception as e:
                refresh_duration = time.time() - start_time
                metric = TokenMetrics(
                    refresh_time=refresh_duration,
                    token_lifetime=0,
                    success=False,
                    error=str(e)
                )
                self.metrics.append(metric)
                raise
        
        def get_stats(self):
            if not self.metrics:
                return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            
            successful = [m for m in self.metrics if m.success]
            failed = [m for m in self.metrics if not m.success]
            
            if successful:
                avg_refresh_time = sum(m.refresh_time for m in successful) / len(successful)
                avg_lifetime = sum(m.token_lifetime for m in successful) / len(successful)
            else:
                avg_refresh_time = 0
                avg_lifetime = 0
            
            return {
                "total_refreshes": len(self.metrics),
                "successful_refreshes": len(successful),
                "failed_refreshes": len(failed),
                "success_rate": len(successful) / len(self.metrics) * 100,
                "avg_refresh_time": avg_refresh_time,
                "avg_token_lifetime": avg_lifetime
            }

–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è
------------

–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    class CustomTokenManager(TokenManager):
        REFRESH_BUFFER_SECONDS = 60  # –û–±–Ω–æ–≤–ª—è—Ç—å –∑–∞ –º–∏–Ω—É—Ç—É –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        
        def _is_token_expired(self) -> bool:
            current_time = time.time()
            return current_time >= (self._token_expires_at - self.REFRESH_BUFFER_SECONDS)

–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    manager = TokenManager(
        key_id="your-key-id",
        secret="your-secret",
        auth_url="https://custom-auth-server.com/api/v2/token"
    )

Retry –º–µ—Ö–∞–Ω–∏–∑–º
~~~~~~~~~~~~~~

.. code-block:: python

    import time
    import random

    class RetryTokenManager(TokenManager):
        def _refresh_token(self, max_retries=3) -> str:
            for attempt in range(max_retries):
                try:
                    return super()._refresh_token()
                except Exception as e:
                    if attempt == max_retries - 1:
                        raise
                    
                    # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å jitter
                    delay = (2 ** attempt) + random.uniform(0, 1)
                    time.sleep(delay)
                    print(f"–ü–æ–≤—Ç–æ—Ä –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1} —á–µ—Ä–µ–∑ {delay:.2f}—Å")

–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
------------

–ó–∞—â–∏—Ç–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    import os
    from cryptography.fernet import Fernet

    class SecureTokenManager(TokenManager):
        def __init__(self, encrypted_key_id, encrypted_secret, encryption_key):
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            f = Fernet(encryption_key)
            key_id = f.decrypt(encrypted_key_id).decode()
            secret = f.decrypt(encrypted_secret).decode()
            
            super().__init__(key_id, secret)
            
            # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –ø–∞–º—è—Ç–∏
            del key_id, secret

–†–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π
~~~~~~~~~~~~~~

.. code-block:: python

    class RotatingTokenManager:
        def __init__(self, primary_manager, backup_manager):
            self.primary = primary_manager
            self.backup = backup_manager
            self.use_backup = False
        
        def get_token(self) -> str:
            try:
                if not self.use_backup:
                    return self.primary.get_token()
                else:
                    return self.backup.get_token()
            except RuntimeError:
                # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.use_backup = not self.use_backup
                if not self.use_backup:
                    return self.primary.get_token()
                else:
                    return self.backup.get_token()

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
----------

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ EvolutionInference
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TokenManager –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ EvolutionInference:

.. code-block:: python

    # –í–Ω—É—Ç—Ä–∏ EvolutionInference
    class EvolutionInference(BaseLLM):
        def __init__(self, key_id, secret, ...):
            self._token_manager = TokenManager(key_id, secret)
        
        def _make_request(self, ...):
            token = self._token_manager.get_token()
            headers = {"Authorization": f"Bearer {token}"}
            # ... –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞

–ù–µ–∑–∞–≤–∏—Å–∏–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
~~~~~~~~~~~~~~~~~~~~~~~~~

–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TokenManager –æ—Ç–¥–µ–ª—å–Ω–æ:

.. code-block:: python

    import requests

    manager = TokenManager("key_id", "secret")

    def make_api_request(data):
        token = manager.get_token()
        
        response = requests.post(
            "https://api.cloud-ru-tech.com/v1/chat/completions",
            headers={"Authorization": f"Bearer {token}"},
            json=data
        )
        
        return response.json()

–°–º. —Ç–∞–∫–∂–µ
---------

* :doc:`evolution-inference` - –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å LLM
* :doc:`../guide/token-management` - –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
* :doc:`../guide/error-handling` - –†–∞–±–æ—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏ 